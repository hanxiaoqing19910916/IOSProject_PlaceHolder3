// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IMMessage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Immessage.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImmessageRoot

@implementation ImmessageRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ImmessageRoot_FileDescriptor

static GPBFileDescriptor *ImmessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - UserInfo

@implementation UserInfo

@dynamic hasName, name;
@dynamic hasLevel, level;

typedef struct UserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  int64_t level;
} UserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UserInfo__storage_, name),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "level",
        .dataTypeSpecific.className = NULL,
        .number = UserInfo_FieldNumber_Level,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UserInfo__storage_, level),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UserInfo class]
                                     rootClass:[ImmessageRoot class]
                                          file:ImmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextMessage

@implementation TextMessage

@dynamic hasUser, user;
@dynamic hasText, text;

typedef struct TextMessage__storage_ {
  uint32_t _has_storage_[1];
  UserInfo *user;
  NSString *text;
} TextMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .number = TextMessage_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TextMessage__storage_, user),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.className = NULL,
        .number = TextMessage_FieldNumber_Text,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TextMessage__storage_, text),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextMessage class]
                                     rootClass:[ImmessageRoot class]
                                          file:ImmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GiftMessage

@implementation GiftMessage

@dynamic hasUser, user;
@dynamic hasGiftname, giftname;
@dynamic hasGiftURL, giftURL;
@dynamic hasGiftCount, giftCount;

typedef struct GiftMessage__storage_ {
  uint32_t _has_storage_[1];
  UserInfo *user;
  NSString *giftname;
  NSString *giftURL;
  NSString *giftCount;
} GiftMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .number = GiftMessage_FieldNumber_User,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GiftMessage__storage_, user),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "giftname",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessage_FieldNumber_Giftname,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GiftMessage__storage_, giftname),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftURL",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessage_FieldNumber_GiftURL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GiftMessage__storage_, giftURL),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "giftCount",
        .dataTypeSpecific.className = NULL,
        .number = GiftMessage_FieldNumber_GiftCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GiftMessage__storage_, giftCount),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GiftMessage class]
                                     rootClass:[ImmessageRoot class]
                                          file:ImmessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GiftMessage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\007\000\004\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
